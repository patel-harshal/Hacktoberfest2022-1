Inheritance
Inheritance is the capability of one class to derive or inherit the properties from some another class. The benefits of inheritance are:

It represents real-world relationships well.

It provides reusability of a code. We donâ€™t have to write the same code again and again. Also, it allows us to add more features to a class without modifying it.

It is transitive in nature, which means that if class B inherits from another class A, then all the subclasses of B would automatically inherit from class A.


class Mobile(object):
  pass

m1=Mobile()
print(m1)

#1. __new__() => this method provide memory to objects and its attribute
#2. __init__() => constructor/initializer , this method will initialise value to attribute
#3. __str__() => this method return id of object



class Mobile(object):
  def __str__(self):
    return "hello"

m1=Mobile()
print(m1)

list1=[1,2,3,4]
print(list1)


#1. __new__() => this method provide memory to objects and its attribute
#2. __init__() => constructor/initializer , this method will initialise value to attribute
#3. __str__() => this method return id of object



class Mobile(object):
  def __init__(self):
    self.price=45000
  def __str__(self):
    return f"[{self.price}]"

m1=Mobile()
print(m1)

#list1=[1,2,3,4]
#print(list1)


#1. __new__() => this method provide memory to objects and its attribute
#2. __init__() => constructor/initializer , this method will initialise value to attribute
#3. __str__() => this method return id of object


class Mobile:
  def __new__(cls):
    return "hello"
m1=Mobile()
print(m1)




class Mobile:
  def __new__(cls):
    return "hello"
  def __init__(self):
    self.brand="Samsung"  
m1=Mobile()
print(m1.brand)



class Mobile:
  def __init__(self,brand):
    self.brand=brand 
m1=Mobile()
print(m1.brand)



class Mobile:
  def __init__(self,brand):
    self.brand=brand 
m1=Mobile("Samsung")
print(m1.brand)



Types of Inheritance:
1. Single inheritance:
When a child class inherits from only one parent class, it is called as single inheritance. We saw an example above.



class ClassA:
  def __init__(self):
    self.a=20
  pass
class ClassB(ClassA):
  pass

objB=ClassB()
print(objB)  




class ClassA:
  def __init__(self,a):
    self.a=a
    pass

class ClassB(ClassA):
  pass

objB=ClassB(20)
print(objB.a)  






class ClassA:
  def __init__(self,a):
    self.a=a
  

class ClassB(ClassA):
  def __init__(self,b):
    self.b=b
  

objB=ClassB(20)
print(objB.a)  






class ClassA:
  staticA=10
  def __init__(self,a):
    self.a=a
  

class ClassB(ClassA):
  def __init__(self,b):
    self.b=b
  

objB=ClassB(20)
print(objB.staticA)  


1) static variable from a parent class directly inherit to its child class.

2) the attributes of parent class is not directly inherit to its child classes until unless you can call its constructor.

3) any method of parent class will directly inherit to its child classes.



class ClassA:
  staticA=10
  def __init__(self,a):
    self.a=a
  def methodA(self):
    print("i am a method of class A") 
  

class ClassB(ClassA):
  def __init__(self,b):
    self.b=b
  

objB=ClassB(20)
objB.methodA())  




class ClassA:
  staticA=10
  def __init__(self,a):
    self.a=a
  def methodA(self):
    print("i am a method of class A") 
  

class ClassB(ClassA):
  def __init__(self,b):
    self.b=b
  def mrthodA(self):
    print("i am a method of class B") 
  

objB=ClassB(20)
objB.methodA()



class ClassA:
  staticA=10
  def __init__(self,a):
    self.a=a
  def methodA(self):
    print("i am a method of class A") 
  

class ClassB(ClassA):
  
  def mrthodA(self):
    print("i am a method of class B") 
  

objB=ClassB(20)
print(objB)


  

class ClassA:
  staticA=10
  def __init__(self,a,b):
    self.a=a
  def methodA(self):
    print("i am a method of class A") 
  

class ClassB(ClassA):
  
  def mrthodA(self):
    print("i am a method of class B") 
  

objB=ClassB(20,40)
print(objB)




class ClassA:
  staticA=10
  def __init__(self,a,b):
    self.a=a
  def methodA(self):
    print("i am a method of class A") 
  

class ClassB(ClassA):
  
  def mrthodA(self):
    print("i am a method of class B") 
  

objB=ClassB(20,40)
print(objB.a)



class ClassA:
  staticA=10
  def __init__(self,a):
    self.a=a
  def methodA(self):
    print("i am a method of class A") 
  

class ClassB(ClassA):
  def __init__(self,b):
    self.b=b
  def mrthodA(self):
    print("i am a method of class B") 
  

objB=ClassB(20)
print(objB.a)  



class ClassA:
  staticA=10
  def __init__(self,a):
    self.a=a
  def methodA(self):
    print("i am a method of class A") 
  

class ClassB(ClassA):
  def __init__(self,b):
    ClassA.__init__(self,a=30)
    self.b=b
  def mrthodA(self):
    print("i am a method of class B") 
  

objB=ClassB(20)
print(objB.a)  



class ClassA:
  staticA=10
  def __init__(self,a):
    self.a=a
  def methodA(self):
    print("i am a method of class A") 
  

class ClassB(ClassA):
  def __init__(self,b,a):
    ClassA.__init__(self,a)
    self.b=b
  def mrthodA(self):
    print("i am a method of class B") 
  

objB=ClassB(20,40)
print(objB.a)  




class ClassA:
  staticvar=45
  def __init__(self,a):
    self.a=a 

  def displayA(self):
    print("method of class A called")

class ClassB(ClassA):
  def __init__(self):
    ClassA.__init__(self,9766)
    self.b=75

objb=ClassB()
print(objb.a)
print(objb.staticvar)
objb.displayA()




method of class A called
2. Multiple inheritance:
When a child class inherits from multiple parent classes, it is called as multiple inheritance.

class ClassA:
  staticA=10
  def __init__(self,a):
    self.a=a
  def method(self):
    print("i am a method of class A") 
  

class ClassB:
  def __init__(self,b):
    ClassA.__init__(self,a)
    self.b=b
  def mrthod(self):
    print("i am a method of class B") 

class ClassC(ClassA,ClassB):
  def __init__(self,c):
    self.c=c
  def method(self):
    print("i am method of class C")

objC=ClassC(40)
objC.method()  




class ClassA:
  staticA=10
  def __init__(self,a):
    self.a=a
  def method(self):
    print("i am a method of class A") 
  

class ClassB:
  def __init__(self,b):
    ClassA.__init__(self,a)
    self.b=b
  def mrthod(self):
    print("i am a method of class B") 

class ClassC(ClassA,ClassB):
  def __init__(self,c):
    self.c=c
  def methodC(self):
    print("i am method of class C")

objC=ClassC(40)
objC.method()  
[ ]
class ClassA:
  staticA=10
  def __init__(self,a):
    self.a=a
  def method(self):
    print("i am a method of class A") 
  

class ClassB:
  def __init__(self,b):
    ClassA.__init__(self,a)
    self.b=b
  def method(self):
    print("i am a method of class B") 

class ClassC(ClassB,ClassA):
  def __init__(self,c):
    self.c=c
  def methodC(self):
    print("i am method of class C")

objC=ClassC(40)
objC.method()  
[ ]
class ClassA:
  staticA=10
  def __init__(self,a):
    self.a=a
  def method(self):
    print("i am a method of class A") 
  

class ClassB:
  def __init__(self,b):
    ClassA.__init__(self,a)
    self.b=b
  def method(self):
    print("i am a method of class B") 

class ClassC(ClassB,ClassA):
  staticvar=45
  def __init__(self,c):
    self.c=c
  def methodC(self):
    print("i am method of class C")

objC=ClassC(40)
print(objC.staticvar)  

class ClassA:
  staticA=10
  def __init__(self,a):
    self.a=a
  def method(self):
    print("i am a method of class A") 
  

class ClassB:
  def __init__(self,b):
    ClassA.__init__(self,a)
    self.b=b
  def method(self):
    print("i am a method of class B") 

class ClassC(ClassB,ClassA):
  staticvar=45
  def __init__(self,c):
    self.c=c
  def methodC(self):
    print("i am method of class C")
objC=ClassC(40)
print(objC.a)  



class ClassA:
  staticA=10
  def __init__(self,a):
    self.a=a
  def method(self):
    print("i am a method of class A") 
class ClassB:
  def __init__(self,b):
    ClassA.__init__(self,a)
    self.b=b
  def method(self):
    print("i am a method of class B") 
class ClassC(ClassA,ClassB):
  staticvar=45
  def methodC(self):
    print("i am method of class C")
objC=ClassC(40)
print(objC.a) 


3. Multilevel inheritance:
When we have child and grand child relationship


class ClassA:
  def __init__(self):
    self.a=30

  def method(self):
    print("method of classA is called")

class ClassB(ClassA):
  def __init__(self):
    super().__init__()
    self.b=56

class ClassC(ClassB):
  def __init__(self):
    super().__init__()#this is  a constructor of b(without argument it will call the constructor of b itself)
#super(ClassB,self).__init__()this is  a constructor of a because classB is the constructor of a here
    self.c=39
#super() call the parent class for calling the grandparent call the parent to parent class so we use super() class.
objc=ClassC()
print(objc.b)


4. Hierarchical inheritance
More than one derived classes are created from a single base.


class ClassA:
  def __init__(self):
    self.a=30

  def method(self):
    print("method of classA is called")

class ClassB(ClassA):
  def __init__(self):
    super().__init__()
    self.b=56

class ClassC(ClassB):
  def __init__(self):
    super().__init__()
    self.c=39

class ClassD(ClassA):
  def __init__(self):
    self.d=12

objc=ClassC()
print(objc.a)

5.Hybrid Inheritance:
Inheritence consisting of multiple types of inheritence is called hybrid inheritence.



class ClassA:
  def __init__(self):
    self.a=30

  def method(self):
    print("method of classA is called")

class ClassB(ClassA):
  def __init__(self):
    super().__init__()
    self.b=56

class ClassC(ClassB):
  def __init__(self):
    #super(ClassB,self).__init__()
    self.c=39

class ClassD(ClassC,ClassB):
  def __init__(self):
    self.d=12

obj=ClassD()


super function
[ ]
class ClassA:
  def __init__(self):
    self.a=30

  def method(self):
    print("method of classA is called")

class ClassB:
  def __init__(self):
    self.b=56

class ClassC(ClassA,ClassB):
  def __init__(self):
    super().__init__()
    ClassB.__init__(self)
    self.c=50

objc=ClassC()
print(objc.a)
print(objc.b)


class ClassA:
  def __init__(self):
    self.a=30

  def method(self):
    print("method of classA is called")

class ClassB(ClassA):
  def __init__(self):
    super().__init__()
    self.b=56
#The super() function returns an object that represents the parent class.
#The super() function is used to give access to methods and properties of a parent or sibling class.
#Since we do not need to specify the name of the base class when we call its members,we can easily change the base class name (if we need to).
objb=ClassB()
print(objb.a)
30
The super() function is used to give access to methods and properties of a parent or sibling class.

The super() function returns an object that represents the parent class.

Advantage of using super()
Since we do not need to specify the name of the base class when we call its members, we can easily change the base class name (if we need to).

Method Resolution Order:

MRO is a concept used in inheritance. It is the order in which a method is searched for in a classes hierarchy and is especially useful in Python because Python supports multiple inheritance.

